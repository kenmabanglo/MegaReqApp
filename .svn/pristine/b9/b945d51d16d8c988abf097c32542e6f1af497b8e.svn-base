
<div class="inline-flex space-between">

  <!-- Filter -->
  <ng-container *ngIf="isFilterable">
    
    <mat-form-field *ngIf="requestTypeFilter" floatLabel="always" appearance="outline" class="requestType" color="primary">
      <mat-label>Request Type</mat-label>
      <mat-select (selectionChange)="applyFilter($event.value)">
          <mat-option value=''>Select Request Type</mat-option>
          <mat-option *ngFor="let c of request_types; " [value]="c.requestTypeCode">
          {{c.requestTypeCode}} - {{c.requestTypeName }}
          </mat-option>
      </mat-select>  
    </mat-form-field>

    <mat-form-field floatLabel="always" appearance="outline" color="primary">
      <mat-label>Filter By Branch</mat-label>
      <input type="text"
           placeholder="Select Branch" 
           matInput 
           #searchB
           [formControl]="searchBranch" 
           (input)="applyFilterBranch($event)"
           [matAutocomplete]="auto">
        <button [hidden]="hiddenCloseBranch" matSuffix mat-icon-button aria-label="Clear" (click)="clearSearchBranch()">
          <mat-icon>close</mat-icon>
        </button>
      <mat-autocomplete #auto="matAutocomplete" (optionSelected)="applyFilterBranch($event)" [displayWith]="displayFn"> 
        <mat-option *ngFor="let b of filteredOptions | async" [value]="b">
          {{ b.divisionName | uppercase }}
          </mat-option>
      </mat-autocomplete>
 
    </mat-form-field>

    <mat-form-field appearance="fill"  class="searchField">
      <input matInput (input)="applyFilter($event)" #search placeholder="Search User"> 
      <button [hidden]="hiddenClose" matSuffix mat-icon-button aria-label="Clear" (click)="clearSearch()">
        <mat-icon>close</mat-icon>
        </button>
    </mat-form-field>

    <div align="end">
      <button mat-raised-button (click)="refresh()" color="accent" matTooltip="Refresh Data">
          <mat-icon>refresh</mat-icon> Refresh</button>
    </div>

  </ng-container>

  <!-- Table -->
  <table mat-table [dataSource]="tableDataSource" matSort (matSortChange)="sortTable($event)">
 
    <ng-container *ngFor="let tableColumn of tableColumns" [matColumnDef]="tableColumn.name">

      <!-- if sortable column header -->
      <ng-container *ngIf="tableColumn.isSortable; else notSortable">
        <th mat-header-cell *matHeaderCellDef [mat-sort-header]="tableColumn.name"
            [arrowPosition]="tableColumn.position === 'right' ? 'before' : 'after'">
          {{ tableColumn.name  }}
        </th>
      </ng-container>
      <!-- else not sortable -->
      <ng-template #notSortable>
        <th mat-header-cell *matHeaderCellDef [class.text-right]="tableColumn.position == 'right'">
          {{tableColumn.name}}
        </th>
      </ng-template>

      <!-- column data -->
      <td mat-cell *matCellDef="let element">
          {{ element | dataPropertyGetter: tableColumn.dataKey }}
      </td>
    </ng-container>

    <!-- action column -->
    <ng-container *ngIf="rowActionIcon.length > 0" matColumnDef="Actions">
      <th mat-header-cell *matHeaderCellDef>Actions</th>
      <td mat-cell *matCellDef="let element;">
        <ng-container *ngFor="let action of rowActionIcon">
          
          <!-- Activate User -->
           <button mat-icon-button [hidden]="status != 'inactive'" 
            *ngIf="action == 'verified_user'" 
            [disabled]="element['active']==1"  
            (click)="emitRowAction(action, element)"
            color="primary">
            <mat-icon>{{ action }}</mat-icon>
          </button>

          <button mat-icon-button [hidden]="status == 'inactive'" 
            *ngIf="action == 'power_settings_new'" 
            [disabled]="element['active']==3"  
            (click)="emitRowAction(action, element)"
            color="warn">
            <mat-icon>{{ action }}</mat-icon>
          </button>

          <!-- Assign Branch -->
          <button mat-icon-button [hidden]="status == 'inactive'"  
            *ngIf="action == 'add_location'" 
            [disabled]="element['positionName'] == 'District Manager'" 
            (click)="emitRowAction(action, element)"
            color="primary">
            <mat-icon>{{ action }}</mat-icon>
          </button>

           <!-- Change Password Action -->
          <button mat-icon-button [hidden]="status == 'inactive'" 
            *ngIf="action == 'lock'"
            (click)="emitRowAction(action, element)"
            color="warn">
            <mat-icon>{{ action }}</mat-icon>
          </button>

          <!-- Set Store Based Action -->
          <button mat-icon-button *ngIf="action == 'store'"  
            [hidden]="status != 'inactive'" 
            [disabled]="element['storeBased'] == 'N'"
            (click)="emitRowAction(action, element)"
            color="accent">
            <mat-icon>{{ action }}</mat-icon>
          </button>
        </ng-container>
       
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>

  <!-- Pagination -->
  <mat-paginator #matPaginator *ngIf="isPageable"
                [length]="totalItems"
                [pageSizeOptions]="paginationSizes"
                [pageSize]="defaultPageSize"
                (page)="page.emit($event)"
                showFirstLastButtons
                >
  </mat-paginator>

</div>
